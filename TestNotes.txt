SARU (monkey)
is a testing library designed to help with testing the elyemntalz game.

This file is just a dumpiing gorund for ideas at the moment as I build towards
a proper devcelopment plan.


How do we test elymentalz code?
There are three types of tests...
1) Regression tests
2) Functional tests
3) Unit tests

Every test should be a single executable!
Every test should be a single source file!
The bits of the makefile for the test should be autogenerated from the source!
 + Some kind of metadata in the source file. Gotta be easy to specify or it wont get done.
 + Automagic dependency tracking of includes. 
 + Tracking of library dependencies.
 + Warnings about directories without tests (unless something like a .notest exists? )


======= EXAMPLE TEST? =======

// TEST:RequiresLibrary FakeDummy
// TEST:TestName Dummy Test
// TEST:Tests That the tesing library works
// TEST:Expected pass

#include "TestUtils.h"
#include "dummy.h"

int main()
{
   bool ok = doSomething();
   if(!ok) return Test::Fail();
   return Test::Ok();
}

======= END EXAMPLE =======



The tesing suite could be bsaed around a set of small tools that do simple
jobs, with bigger tools built around these tools.
This could be kind of like the idea behind git - with plumbing and poreclain.

Possible small tools include:
a) extracting settings from source code.
b) builing a makefile
c) updating/tracking/retreiving library names
d) tools to build, run and report on tests
e) tools to analyse test results over time

=============================
First Cut:
We should aim to have a system that
i  )  can build and run one or more tests in a directory.
ii )  can produce a test template file
iii)  leaves no clutter in the tes directories ( hides it in a .test subdir? )
iv )  provides a way to run all tests in a project.
v  )  in the spirit of git all helperswill be called saru-xxx and callable through a
      wrapper script as "saru xxx args"

Later:
ii) Test templates could be named (eg "saru template c++" would get the c++ template...)



