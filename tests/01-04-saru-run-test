#!/usr/bin/env python

import sys
import subprocess
import os
import difflib


runProc = subprocess.Popen( [ "../src/saru-run-test","suite", "../fakeproject/" ], stdout=subprocess.PIPE, stderr=subprocess.PIPE )
retcode = runProc.wait()

if( retcode != 1 ) :
  print >> sys.stderr, "returned non-one exit code"
  exit(1)

(procstdout, procstderr) = runProc.communicate()

lines = procstderr.splitlines()
if ( len(lines)!= 0 ):
  print >> sys.stderr, "Non-empty stderr"
  print >> sys.stderr, procstderr
  exit(1)

expectedOutput="\
failingtest.bash : FAILED\n\
failingtest.py : FAILED\n\
failsToCompile.cpp : FAILED???\n\
  STDOUT :\n\
  STDERR :saru-run-test : make failed with error code 2\n\
failsToCompile.cpp:3:2: error: #error \"Intentionally does not compile\"\n\
make: *** [failsToCompile.cpp.test] Error 1\n\
\n\
g++  failsToCompile.cpp -o .saru/bin/failsToCompile.cpp.test  \n\
\n\
\n\
failsToRun.cpp : FAILED???\n\
  STDOUT :\n\
  STDERR :saru-run-test : execution of test failed with error code 1\n\
Intentionaly returns 1\n\
\n\
\n\
\n\
needsinclude.cpp : OK\n\
passingtest.bash : OK\n\
testtag01.cpp : OK\n\
testtag02.bash : OK\n\
testtag03.py : OK\n\
5 / 9\n\
"


if ( procstdout!= expectedOutput ):


  print >> sys.stderr, "output not as expected"
  diff =  difflib.context_diff( procstdout.splitlines(), expectedOutput.splitlines() )
  for l in diff:
    print l 
  exit(1)
exit(0)

