#!/usr/bin/env python

# Copyright (c) 2008, Michael Anderson
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the saru library nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY MICHAEL ANDERSON ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL MICHAEL ANDERSON BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# This has a bunch of different modes to run in...
# dump which dumps all the saru tags
# issaru which just says whether or not the file is saru printing "YES" or "NO"
# get xxx which prints any tags matching xxx.


import sys
import re
import os

# Get a list of  all the SARU tags in a python test file
def parsePythonFile( infile ):
  pattern_directive = re.compile(r"^\s*#\s*SARU\s*:\s*(\S+)(.*)$")
  pattern_comment = re.compile(r"^\s*#")
  pattern_empty = re.compile(r"^\s*$")
  settings={}

  for line in infile:
    if( pattern_empty.search(line) ) :
      continue
    match = pattern_directive.search(line); 
    if ( match ):
      key = match.group(1)
      value = match.group(2)
      if settings.has_key(key):
        settings[key].append(value.strip())
      else:
        settings[key]=[ value.strip() ]
      continue
    if ( pattern_comment.search(line) ):
      continue
    break
  return settings
  



# Get a list of  all the SARU tags in a c++ test file
def parseCXXFile( infile ):
  pattern_directive = re.compile(r"^\s*//\s*SARU\s*:\s*(\S+)(.*)$")
  pattern_comment = re.compile(r"^\s*//")
  pattern_empty = re.compile(r"^\s*$")
  settings={}

  for line in infile:
    if( pattern_empty.search(line) ) :
      continue
    match = pattern_directive.search(line); 
    if ( match ):
      key = match.group(1)
      value = match.group(2)
      if settings.has_key(key):
        settings[key].append(value.strip())
      else:
        settings[key]=[ value.strip() ]
      continue
    if ( pattern_comment.search(line) ):
      continue
    break
  return settings

# Get a list of  all the SARU tags in a saruconf file
def parseSaruconfFile( infile ):
  pattern_directive = re.compile(r"^\s*(\S+)(.*)$")
  pattern_empty = re.compile(r"^\s*$")
  settings={}

  for line in infile:
    if( pattern_empty.search(line) ) :
      continue
    match = pattern_directive.search(line); 
    if ( match ):
      key = match.group(1)
      value = match.group(2)
      if settings.has_key(key):
        settings[key].append(value.strip())
      else:
        settings[key]=[ value.strip() ]
      continue
  return settings

# Get a list of  all the SARU tags in a bash test file
def parseBashFile( infile ):
  pattern_directive = re.compile(r"^\s*#\s*SARU\s*:\s*(\S+)(.*)$")
  pattern_comment = re.compile(r"^\s*#")
  pattern_empty = re.compile(r"^\s*$")
  settings={}

  for line in infile:
    if( pattern_empty.search(line) ) :
      continue
    match = pattern_directive.search(line); 
    if ( match ):
      key = match.group(1)
      value = match.group(2)
      if settings.has_key(key):
        settings[key].append(value.strip())
      else:
        settings[key]=[ value.strip() ]
      continue
    if ( pattern_comment.search(line) ):
      continue
    break
  return settings

# Get a list of  all the SARU tags in a dummy test file
def parseDummyMulti( infile ):
  return { "moo":"foo" }


knownFileTypes = { ".cpp":parseCXXFile, ".bash":parseBashFile, ".py":parsePythonFile, ".dummymt":parseDummyMulti }

def printUsage():
  print >> sys.stderr, "USAGE: saru-parse dump file"
  print >> sys.stderr, "USAGE: saru-parse issaru file"
  print >> sys.stderr, "USAGE: saru-parse get key file"

# How was this script run?
sarubinpath = os.path.dirname( os.path.abspath( sys.argv[0] ) )

def doSaruParseDump():
  if(len(sys.argv)!=3):
    printUsage()
    exit(1)
  if ( os.path.isdir(sys.argv[2]) ):
    print os.path.basename(sys.argv[0]) + " : Doesn't run on a directory yet."
    exit(1)

  fulltestname = sys.argv[2]
  (testdir, testname) = os.path.split( fulltestname )

  fileExtension = os.path.splitext(testname)[1] 
  if ( not knownFileTypes.has_key( fileExtension ) ):
    print >> sys.stderr, "saru-parse : Unsuported file format for file "+testname
    exit(1)


  #Is there a saruconf file at the same location
  saruconfpath = os.path.join( testdir, "saruconf" );
  saruconfsettings = {}
  try:
    saruconffile = open(saruconfpath,"r")
    saruconfsettings = parseSaruconfFile(saruconffile)
  except IOError:
    pass

  try:
    infile = open(fulltestname, "r")
  except IOError:
    print >> sys.stderr, "saru-parse: Unable to open "+fulltestname
    exit(1)

  settings = knownFileTypes[fileExtension](infile)

  if ( settings=={} ):
    print >> sys.stderr, "saru-parse: No settings in file"
    exit(1)

  for k,v in saruconfsettings.iteritems():
     for vv in v:
       print k+" : "+vv
  for k,v in settings.iteritems():
     for vv in v:
       print k+" : "+vv
  exit(0)

def doSaruParseIsSaru():
  if(len(sys.argv)!=3):
    printUsage()
    exit(1)
  
  if ( os.path.isdir(sys.argv[2]) ):
    print os.path.basename(sys.argv[0]) + " : Doesn't run on a directory yet."
    exit(1)

  fulltestname = sys.argv[2]
  (testdir, testname) = os.path.split( fulltestname )

  fileExtension = os.path.splitext(testname)[1] 
  if ( not knownFileTypes.has_key( fileExtension ) ):
    print "UNKNOWN FORMAT"
    exit(0)

  try:
    infile = open(fulltestname, "r")
  except IOError:
    print >> sys.stderr, "saru-parse: Unable to open "+fulltestname
    exit(1)

  settings = knownFileTypes[fileExtension](infile)
  if ( settings=={} ):
    print "NO"
  else:
    print "YES"
  exit(0)

def doSaruParseGetKey():
  if(len(sys.argv)!=4):
    printUsage()
    exit(1)
  
  if ( os.path.isdir(sys.argv[3]) ):
    print os.path.basename(sys.argv[0]) + " : Doesn't run on a directory yet."
    exit(1)

  key = sys.argv[2]
  fulltestname = sys.argv[3]
  (testdir, testname) = os.path.split( fulltestname )

  fileExtension = os.path.splitext(testname)[1] 
  if ( not knownFileTypes.has_key( fileExtension ) ):
    print >> sys.stderr, "saru-parse : Unsuported file format for file "+testname
    exit(1)

  try:
    infile = open(fulltestname, "r")
  except IOError:
    print >> sys.stderr, "saru-parse: Unable to open "+fulltestname
    exit(1)

  settings = knownFileTypes[fileExtension](infile)
  if( settings.has_key( key )) :
     for val in settings[key] :
        print val
  exit(0)

if ( len(sys.argv) == 1 ):
  printUsage()
  exit(1)


# dump which dumps all the saru tags
# issaru which just says whether or not the file is saru printing "YES" or "NO"
# get xxx which prints any tags matching xxx.
if ( sys.argv[1] == "dump" ):
  doSaruParseDump()
elif ( sys.argv[1] == "issaru" ):
  doSaruParseIsSaru()
elif ( sys.argv[1]=="get" ):
  doSaruParseGetKey()
else:
  printUsage()
  exit(1)


