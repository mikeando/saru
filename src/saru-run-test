#!/usr/bin/env python

import sys
import re
import subprocess
import os

if ( len(sys.argv) != 2 ):
  print "USAGE: saru-run-test filename"
  exit(1)

parseProcess = subprocess.Popen(["./saru-parse", sys.argv[1]], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
retcode = parseProcess.wait()
if(retcode!=0):
  print "saru-run-test : saru-parse failed with error code " + repr(retcode)
  print parseProcess.communicate()[1]
  exit(1)

settings = parseProcess.communicate()[0]


if ( not os.path.isdir(".saru") ):
  if( os.path.exists(".saru") ):
    print >> sys.stderr, "saru-run-test : .saru object exists but is not directory!"
    exit(1)
  os.mkdir(".saru")

if ( not os.path.isdir(".saru/bin") ):
  if( os.path.exists(".saru/bin") ):
    print >> sys.stderr, "saru-run-test : .saru/bin object exists but is not directory!"
    exit(1)
  os.mkdir(".saru/bin")

  
makefile = open(".saru/"+sys.argv[1]+".make","w");

# BUILD A MAKE FILE...
# TODO Make these use the settings taht got read in from the saru-parse stage
print >> makefile, sys.argv[1] + ".test : " + sys.argv[1]
print >> makefile, "\tg++ " + sys.argv[1] + " -o .saru/bin/" + sys.argv[1] + ".test"
makefile.close()

# Lets try making it...
# TODO Make these use the settings taht got read in from the saru-parse stage
makeProcess = subprocess.Popen(["/usr/bin/make", "--file", "./.saru/"+sys.argv[1]+".make", sys.argv[1]+".test"], stdout=subprocess.PIPE, stderr=subprocess.PIPE  )
retcode=makeProcess.wait()

if(retcode!=0):
  print "saru-run-test : make failed with error code " + repr(retcode)
  make_stdout, make_stderr = makeProcess.communicate()
  print make_stderr
  print make_stdout
  exit(1)

# Lets try running it...
testProcess = subprocess.Popen([".saru/bin/"+sys.argv[1]+".test"], stdout=subprocess.PIPE, stderr=subprocess.PIPE ) 
retcode=testProcess.wait()

if(retcode!=0):
  print "saru-run-test : execution of test failed with error code " + repr(retcode)
  test_stdout, test_stderr = testProcess.communicate()
  print test_stderr
  print test_stdout
  exit(1)

print "OK"
  
exit(1)


