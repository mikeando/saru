#!/usr/bin/env python

import sys
import re
import subprocess
import os
import shutil

from stat import *

if ( len(sys.argv) != 2 ):
  print "USAGE: saru-run-test filename"
  exit(1)

if ( os.path.isdir(sys.argv[1]) ):
  print os.path.basename( sys.argv[0] )+" : Doesn't run on a directory yet."
  exit(1)

if( not os.path.exists( sys.argv[1]) ):
  print os.path.basename( sys.argv[0] )+" : nonexistant test "+ os.path.basename( sys.argv[1] )
  exit(1)

# How was this script run?
sarubinpath = os.path.dirname( os.path.abspath( sys.argv[0] ) )
saruparse = os.path.normpath( sarubinpath + "/saru-parse" )


fulltestname = sys.argv[1]
(testdir, testname) = os.path.split( fulltestname )
dotsaru =  os.path.normpath( testdir + "/.saru" )

parseProcess = subprocess.Popen([ saruparse, fulltestname], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
retcode = parseProcess.wait()
if(retcode!=0):
  print "saru-run-test : saru-parse failed with error code " + repr(retcode)
  print parseProcess.communicate()[1]
  exit(1)

settings = parseProcess.communicate()[0]


if ( not os.path.isdir( dotsaru ) ):
  if( os.path.exists( dotsaru ) ):
    print >> sys.stderr, "saru-run-test : .saru object exists but is not directory!"
    exit(1)
  os.mkdir( dotsaru )

if ( not os.path.isdir( dotsaru+"/bin" ) ):
  if( os.path.exists( dotsaru+"/bin" ) ):
    print >> sys.stderr, "saru-run-test : .saru/bin object exists but is not directory!"
    exit(1)
  os.mkdir( dotsaru+"/bin" )

extension = os.path.splitext(testname)[1]
if(extension==".cpp"):
#CPP Files get compiled via a makefile
  makefilename = os.path.normpath( dotsaru+"/"+testname+".make" )
  makefile = open( makefilename,"w")

  # BUILD A MAKE FILE...
  # TODO Make these use the settings taht got read in from the saru-parse stage
  print >> makefile, testname + ".test : " + testname
  print >> makefile, "\tg++ " + testname + " -o .saru/bin/" + testname + ".test"
  makefile.close()
  
  # Lets try making it...
  # TODO Make these use the settings taht got read in from the saru-parse stage
  makeProcess = subprocess.Popen(["/usr/bin/make", "-C", testdir, "--file", makefilename], stdout=subprocess.PIPE, stderr=subprocess.PIPE  )
  retcode=makeProcess.wait()
  
  if(retcode!=0):
    print >> sys.stderr, "saru-run-test : make failed with error code " + repr(retcode)
    make_stdout, make_stderr = makeProcess.communicate()
    print >> sys.stderr, make_stderr
    print >> sys.stderr, make_stdout
    exit(1)
  executablename = os.path.normpath(dotsaru+"/bin/"+testname+".test")
elif(extension==".py"):
  executablename = os.path.normpath( dotsaru+"/bin/"+testname )
  shutil.copyfile( fulltestname, executablename) 
elif(extension==".bash"):
  executablename = os.path.normpath( dotsaru+"/bin/"+testname )
  shutil.copyfile( fulltestname, executablename) 
else:
  print >> sys.stderr, "Unknown extension on file "+testname
  exit(1)

# Lets try running it...
os.chmod( executablename, S_IREAD | S_IWUSR | S_IXUSR )
testProcess = subprocess.Popen([ executablename ], stdout=subprocess.PIPE, stderr=subprocess.PIPE ) 
retcode=testProcess.wait()

if(retcode!=0):
  print "saru-run-test : execution of test failed with error code " + repr(retcode)
  test_stdout, test_stderr = testProcess.communicate()
  print test_stderr
  print test_stdout
  exit(1)

print "OK"
  
exit(1)


