#!/usr/bin/python

# Copyright (c) 2008, Michael Anderson
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the saru library nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY MICHAEL ANDERSON ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL MICHAEL ANDERSON BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import sys
import os
import re

def isSystemRoot( path ):
  return ( os.path.abspath( os.path.normpath( path ) ) == "/" )

def isSaruRoot( path ):
  saruconf = os.path.normpath( path + "/saruconf" )
  if (not os.path.exists( saruconf ) ):
    return False
  try:
    infile = open(saruconf, "r")
  except IOError:
    print >> sys.stderr, "saru-path-helper: Unable to open "+ saruconf
    exit(1)
  root_pattern = re.compile(r"^\s*is-saru-root\s*=\s*true\s*$")
  for line in infile:
    if( root_pattern.search(line) ):
      return True
  return False

def getParentPath( path ):
  if ( path == "/" ): 
    return "/"
  return os.path.abspath( os.path.normpath(path+"/.." ) )


if( len(sys.argv)!=3 ):
  print >> sys.stderr, "USAGE: saru-path-helper mode file/path"
  exit(1)

if( sys.argv[1] == "find-root" ):
  path = os.path.abspath( os.path.normpath( sys.argv[2] ) );
  if( not os.path.isdir( path ) ):
    print >> sys.stderr, " saru-path-helper : find-root expects a directory argument"
    exit(1)
  while( not isSystemRoot(path) ):
    if( isSaruRoot(path) ) :
      print path
      exit(0)
    path = getParentPath(path)
  if( isSaruRoot(path) ) :
    print path
    exit(0)
  exit(1)
else:
  print >> sys.stderr, "saru-path-helper : Unknown mode "+sys.argv[1]
  print >> sys.stderr, "known modes are :"
  print >> sys.stderr, "  find-root"
  exit(1)
